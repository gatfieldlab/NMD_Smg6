#!/bin/bash

function help(){
    echo " "
    echo "mapping QC for pipeline outputs"
    echo " "
    echo "mappingQC [OPTIONS]"
    echo " "
    echo "options:"
    echo "-h|--help            show brief help."
    echo "-i|--input           name of the input folder."
    echo "                     default \"mapping_data\""
    echo "-f|--config-file     configuration file to use"
    echo "-s|--suffix          suffix used in the pipeline"
    echo "-a|--sample          sample file"
    echo " "
}

if [ $# -eq 0 ]
then
    help
    exit 0
fi

while test $# -gt 0; do
  case "$1" in
      -h|--help)
	  help
	  exit 0
	  ;;
      -i)
	  shift
	  if test $# -gt 0; then
              export DIR=$1
	  else
              DIR="mapping_data"
	  fi
	  shift
	  ;;
      --input*)
	  export DIR=`echo $1 | sed -e 's/^[^=]*=//g'`
	  shift
	  ;;
      -f)
	  shift
	  if test $# -gt 0; then
              export CONF=$1
	  else
	      echo "no config file specified"
	      exit 1
	  fi
	  shift
	  ;;
      --config-file*)
	  export CONF=`echo $1 | sed -e 's/^[^=]*=//g'`
	  shift
	  ;;
      -s)
	  shift
	  if test $# -gt 0; then
              export SUFX=$1
	  else
	      echo "no suffix specified"
	      exit 1
	  fi
	  shift
	  ;;
      --suffix*)
	  export SUFX=`echo $1 | sed -e 's/^[^=]*=//g'`
	  shift
	  ;;
      -a)
	  shift
	  if test $# -gt 0; then
              export SFILE=$1
	  else
	      echo "no sample file specified"
	      exit 1
	  fi
	  shift
	  ;;
      --sample*)
	  export SFILE=`echo $1 | sed -e 's/^[^=]*=//g'`
	  shift
	  ;;
      *)
	  echo "ERROR: $1 is not an accepted option"
	  help
	  exit 0
	  ;;
  esac
done

function checkFile (){
    if [ ! -f $1 ]; then
	echo "$1 not found"
	exit 1
    fi
}

function checkCmd () {
    if ! command -v $1 &> /dev/null
    then
	echo "$1 could not be found"
	exit 1
    fi
}


checkFile $CONF
checkFile $SFILE

checkCmd samtools
checkCmd readLengthDistribution.py
checkCmd snpDistribution.py

source $CONF


#############################################
### Make directory tree and set file names
[ ! -d $DIR/qc${SUFX} ] && ( mkdir $DIR/qc${SUFX} )

OUTDIR=$DIR/qc${SUFX}
PSTAT=preProcessStats.dat
MSTAT=mappingStats.dat
DEDUP=dedupStat.dat
BARCODE=globalBarcodeCounts.dat

for I in "${MAPTYPE[@]}"
do
    if [[ $I =~ cdna ]];
    then
	ORG=$(echo $I | awk 'BEGIN{FS="-"}{print $1}')
    fi
done


#############################################
### Get trimming stats and filtering stats
echo "Calculating pre-processing stats"
if [ -f $OUTDIR/$PSTAT ];
then
    echo '  already done'
else
    echo -e "Library\tRun\tSubset\tSoftware\tType\tCounts" > $OUTDIR/$PSTAT
    for I in $(cat $SFILE); do
	LIBRARY=$(echo $I | awk 'BEGIN{FS="_"}{print $1}')
	RUN=$(echo $I | awk 'BEGIN{FS="_"}{print $3}')
	SUBSET=$(echo $I | awk 'BEGIN{FS="_"}{print $6}')
	TFILE=trimmed_data/${I}${SUFX}_trimming.log
	QFILE=filtered_data/${I}${SUFX}_qual_filter.log
	SZFILE=filtered_data/${I}${SUFX}_size_filter.log
	for K in "${PRE_PROC_STEPS[@]}";
	do
	    case "$K" in
		trim)
		    OUT=$(awk '$0~"filters):"{print $5}' $TFILE | sed 's/,//g')
		    SHORT=$(awk '$0~"too short:"{print $6}' $TFILE | sed 's/,//g')
		    UTRIM=$(awk '$0~"untrimmed:"{print $5}' $TFILE | sed 's/,//g')
		    echo -e "$LIBRARY\t$RUN\t$SUBSET\tcutadapt\tTooShort\t$SHORT" >> $OUTDIR/$PSTAT
		    echo -e "$LIBRARY\t$RUN\t$SUBSET\tcutadapt\tUntrimmed\t$UTRIM" >> $OUTDIR/$PSTAT
		    ;;
		s-filter)
		    SFILTER=$(awk '$0~"filtered out:"{print $NF}' $SZFILE)
		    echo -e "$LIBRARY\t$RUN\t$SUBSET\tconsume\tSizeFilter\t$SFILTER" >> $OUTDIR/$PSTAT
		    ;;
		q-filter)
		    OUT=$(awk '$1 == "Output:"{print $2}' $QFILE)
		    DIS=$(awk '$1 == "discarded"{print $2}' $QFILE)
		    echo -e "$LIBRARY\t$RUN\t$SUBSET\tcutadapt\tQualityFilter\t$DIS" >> $OUTDIR/$PSTAT
		    echo -e "$LIBRARY\t$RUN\t$SUBSET\tcutadapt\tOutput\t$OUT" >> $OUTDIR/$PSTAT
		    ;;
 	    esac
	done
    done
fi

#############################################
### Get the mapping stats:
echo "Calculating mapping stats"
if [ -f  $OUTDIR/$MSTAT ];
then
    echo '  already done'
else
    echo -e "Sample\tLibrary\tRun\tSubset\tType\tCounts" > $OUTDIR/$MSTAT
    INPUT="0"
    for I in $(cat $SFILE); do
		LIBRARY=$(echo $I | awk 'BEGIN{FS="_"}{print $1}')
		RUN=$(echo $I | awk 'BEGIN{FS="_"}{print $3}')
		SUBSET=$(echo $I | awk 'BEGIN{FS="_"}{print $6}')

		SLOG=$DIR/STAR${SUFX}/$I/STAR_1.Log.final.out

		INPUT=$(awk '$0 ~ "Number of input reads"{print $NF}' $SLOG)

		UMAP=$(awk '$0 ~ "Uniquely mapped reads number"{print $NF}' $SLOG)
		MMAP=$(awk '$0 ~ "Number of reads mapped to multiple loci"{print $NF}' $SLOG)
		SMAP=$( echo "$UMAP + $MMAP" | bc)
		SMAP1=$SMAP
		echo -e "$I\t$LIBRARY\t$RUN\t$SUBSET\tstar-mouse-rrna\t$SMAP"
		# UNMAPPED=$( echo "$INPUT - $UMAP - $MMAP" | bc)
		# echo -e "$I\t$LIBRARY\t$RUN\t$SUBSET\tunmapped\t$UNMAPPED" 

		SLOG=$DIR/STAR${SUFX}/$I/STAR_2.Log.final.out
		UMAP=$(awk '$0 ~ "Uniquely mapped reads number"{print $NF}' $SLOG)
		MMAP=$(awk '$0 ~ "Number of reads mapped to multiple loci"{print $NF}' $SLOG)
		SMAP=$( echo "$UMAP + $MMAP" | bc)
		SMAP2=$SMAP
		echo -e "$I\t$LIBRARY\t$RUN\t$SUBSET\tstar-human-rrna\t$SMAP"
		# UNMAPPED=$( echo "$INPUT - $UMAP - $MMAP" | bc)
		# echo -e "$I\t$LIBRARY\t$RUN\t$SUBSET\tunmapped\t$UNMAPPED" 

		SLOG=$DIR/STAR${SUFX}/$I/STAR_3.Log.final.out
		UMAP=$(awk '$0 ~ "Uniquely mapped reads number"{print $NF}' $SLOG)
		MMAP=$(awk '$0 ~ "Number of reads mapped to multiple loci"{print $NF}' $SLOG)
		SMAP=$( echo "$UMAP + $MMAP" | bc)
		SMAP3=$SMAP
		echo -e "$I\t$LIBRARY\t$RUN\t$SUBSET\tstar-mouse-trna\t$SMAP"
		# UNMAPPED=$( echo "$INPUT - $UMAP - $MMAP" | bc)
		# echo -e "$I\t$LIBRARY\t$RUN\t$SUBSET\tunmapped\t$UNMAPPED" 

		SLOG=$DIR/STAR${SUFX}/$I/Log.final.out
		UMAP=$(awk '$0 ~ "Uniquely mapped reads number"{print $NF}' $SLOG)
		MMAP=$(awk '$0 ~ "Number of reads mapped to multiple loci"{print $NF}' $SLOG)
		SMAP=$( echo "$UMAP + $MMAP" | bc)
		SMAP4=$SMAP
		echo -e "$I\t$LIBRARY\t$RUN\t$SUBSET\tstar-mouse-genome\t$SMAP"
		#UNMAPPED=$( echo "$INPUT - $UMAP - $MMAP" | bc)
		UNMAPPED=$( echo "$INPUT - $SMAP1 - $SMAP2 - $SMAP3 - $SMAP4" | bc)
		echo -e "$I\t$LIBRARY\t$RUN\t$SUBSET\tunmapped\t$UNMAPPED" 


	done >> $OUTDIR/$MSTAT
fi


######################################################################
### Extract UMI filtering stats
echo "Calculating duplication levels"
if [ -f  $OUTDIR/$DEDUP ];
then
    echo '  already done'
else
    for I in $(cat $SFILE);
    do
	for K in "${!DEDUP[@]}";
	do
	    MTYPE=${LIBEXTS[$K]}
	    if [ "$MTYPE" != "" ]; then
		LOG=$DIR/logs${SUFX}/$I.${MTYPE}.filterUMI.log
		FILTER=$(awk '$0 ~ "Average duplication level:"{print $NR}' $LOG)
		echo -e "$I\t$FILTER"
	    fi
	done
    done > $OUTDIR/$DEDUP
fi


######################################################################
## Get global barcode counts
echo "Calculation libraries barcode counts"
if [ -f  $OUTDIR/$BARCODE ];
then
    echo '  already done'
else
    for I in $(cat $SFILE);
    do
	awk -v "a=$I" '{print a, $1, $3}' umi_data/${I}_${UMI_WHITELIST}
    done > $OUTDIR/$BARCODE
fi



